package com.gmail.terry996996.controller;

import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.gmail.terry996996.dao.MovieDAO;
import com.gmail.terry996996.domain.MovieBean;
import com.opencsv.CSVReader;

@Controller
@RequestMapping("/movies")
public class MovieController {

	@Autowired
	private MovieDAO dao;

	// 顯示電影清單 ok
	@GetMapping
	public String listMovies(Model model) {
		model.addAttribute("movies", dao.findAll());
		return "movies/list";
	}

	// 顯示新增頁面 ok
	@GetMapping("/create")
	public String showCreateForm(Model model) {
		model.addAttribute("movie", new MovieBean());
		return "movies/form";
	}

	// 儲存資料（新增/修改）
	@PostMapping("/save")
	public String saveMovie(@ModelAttribute MovieBean movie, Principal principal) {
		LocalDateTime now = LocalDateTime.now();
		if (movie.getMovieid() == null) {
			if (principal != null) {
				movie.setCreateTime(now);
				movie.setCreateName(principal.getName());
			} else {
				movie.setCreateTime(now);
				movie.setCreateName("unknown");
			}
		}
		movie.setUpdateTime(now);
		if (principal != null) {
			movie.setUpdateName(principal.getName());
		} else {
			movie.setUpdateName("unknown");
		}
		dao.save(movie);
		return "redirect:/movies";
	}
	
	// 顯示編輯頁面
	@GetMapping("/edit/{id}")
	public String showEditForm(@PathVariable("id") Integer id, Model model) {
		MovieBean movie = dao.findById(id)
				.orElseThrow(() -> new IllegalArgumentException("Invalid movie Id:" + id));
		model.addAttribute("movie", movie); 
		return "movies/update";
	}
	
	@PostMapping("/update")
	public String updateMovie(@ModelAttribute("movie") MovieBean movie, Principal principal) {
	    if (movie.getMovieid() == null) {
	        throw new IllegalArgumentException("電影ID不能為空");
	    }
	    
	    // 檢查電影是否存在
	    MovieBean existingMovie = dao.findById(movie.getMovieid())
	            .orElseThrow(() -> new IllegalArgumentException("找不到電影 ID: " + movie.getMovieid()));
	    
	    // 保留原始創建信息
	    movie.setCreateTime(existingMovie.getCreateTime());
	    movie.setCreateName(existingMovie.getCreateName());
	    
	    // 更新修改信息
	    LocalDateTime now = LocalDateTime.now();
	    movie.setUpdateTime(now);
	    if (principal != null) {
	        movie.setUpdateName(principal.getName());
	    } else {
	        movie.setUpdateName("unknown");
	    }
	    
	    // 保存更新
	    dao.save(movie);
	    
	    return "redirect:/movies";
	}
	
	
//	@PostMapping("/update/{id}")
//	public String updateMovie(@PathVariable("id") Integer id, 
//	                          @ModelAttribute MovieBean movie,
//	                          Model model) {
//	    try {
//	        // 檢查電影是否存在
//	        MovieBean existingMovie = dao.findById(id)
//	                .orElseThrow(() -> new IllegalArgumentException("找不到電影 ID: " + id));
//	        
//	        // 保留原始創建信息
//	        movie.setCreateTime(existingMovie.getCreateTime());
//	        movie.setCreateName(existingMovie.getCreateName());
//	        
//	        // 更新修改信息
//	        LocalDateTime now = LocalDateTime.now();
//	        movie.setUpdateTime(now);
//	        
//	        // 確保 ID 正確設置
//	        movie.setMovieid(id);
//	        
//	        // 保存更新
//	        dao.save(movie);
//	        
//	        return "redirect:/movies";
//	    } catch (Exception e) {
//	        // 處理錯誤
//	        model.addAttribute("error", "更新電影時發生錯誤: " + e.getMessage());
//	        model.addAttribute("movie", movie);
//	        return "movies/update";
//	    }
//	}
	

//	// 顯示編輯頁面
//	@GetMapping("/edit/{id}")
//	public String showEditForm(@PathVariable("id") Integer id, Model model) {
//		MovieBean movie = dao.findById(id)
//				.orElseThrow(() -> new IllegalArgumentException("Invalid movie Id:" + id));
//		model.addAttribute("movie", movie); 
//		return "movies/update";
//	}
	
//	// 顯示編輯頁面 --ckeck???
//	@GetMapping("/edit/{id}")
//	public String showEditForm(@PathVariable("id") Integer id, Model model) {
//		Optional<MovieBean> optionalMovieBean = dao.findById(id);
//		if (optionalMovieBean.isPresent()) {
//			model.addAttribute("movie", optionalMovieBean.get());
//            return "movie/update";
//		}else {
//			return "redirect:/movies";
//		}
//	}
//	
//	
//	@PostMapping("/update")
//    public String update(@ModelAttribute("movie") MovieBean movie, Model model,
//                                @RequestParam(value = "id", required = false) Integer id) {
//
//            dao.save(movie); // 儲存資料
//
//            
//        return "redirect:/movies";
//    }
//	
//	@ModelAttribute
//	public MovieBean findById(@RequestParam(value = "id", required = false) Long id) {
//		MovieBean movie = null; 
//		if (id == null) {
//			return new MovieBean();
//		}
//		Optional<MovieBean> optional = dao.findById(id);
//		if (optional.isPresent()) {
//			movie = optional.get();
//		} else {
//			movie = new MovieBean();
//		}
//		return movie;
//	}
	
	// 刪除
	@GetMapping("/delete/{id}")
	public String deleteMovie(@PathVariable Integer id) {
		dao.deleteById(id);
		return "redirect:/movies";
	}
	
	// 顯示 CSV 上傳頁面
    @GetMapping("/upload")
    public String showUploadPage() {
        return "movies/upload";
    }
    
 // 7. 接收並轉入CSV檔案
    @PostMapping("/upload")
    public String handleFileUpload(@RequestParam("file") MultipartFile file, Principal principal, Model model) {
        try (CSVReader reader = new CSVReader(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8))) {

            String[] line;
            boolean skipHeader = true;
            int lineNumber = 0;
            
            while ((line = reader.readNext()) != null) {
                lineNumber++;
                if (skipHeader) {
                    skipHeader = false;
                    continue;
                }

                try {
                    // 清理與解析
                    String[] tokens = Arrays.stream(line)
                            .map(s -> s != null ? s.trim().replace("\"", "") : "")
                            .toArray(String[]::new);

                    if (tokens.length < 7) {
                        // 記錄日誌並跳過此行
                        System.out.println("第 " + lineNumber + " 行資料欄位不足，已跳過");
                        continue;
                    }

                    MovieBean movie = new MovieBean();
                    movie.setCountry(tokens[0].trim());
                    movie.setMovieName(tokens[1].trim());
                    movie.setApplicant(tokens[2].trim());
                    movie.setProdUnit(tokens[3].trim());
                    
                    // 安全地解析整數和長整數
                    try {
                        if (tokens[4] != null && !tokens[4].trim().isEmpty()) {
                            movie.setShowTheaterNum(Integer.parseInt(tokens[4].trim()));
                        } else {
                            movie.setShowTheaterNum(0); // 或者設定預設值
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("第 " + lineNumber + " 行的放映戲院數量格式不正確: " + tokens[4] + "，已設為0");
                        movie.setShowTheaterNum(0);
                    }
                    
                    try {
                        if (tokens[5] != null && !tokens[5].trim().isEmpty()) {
                            movie.setBoxOffice(Long.parseLong(tokens[5].replace(",", "").trim()));
                        } else {
                            movie.setBoxOffice(0L);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("第 " + lineNumber + " 行的票房格式不正確: " + tokens[5] + "，已設為0");
                        movie.setBoxOffice(0L);
                    }
                    
                    try {
                        if (tokens[6] != null && !tokens[6].trim().isEmpty()) {
                            movie.setSales(Long.parseLong(tokens[6].replace(",", "").trim()));
                        } else {
                            movie.setSales(0L);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("第 " + lineNumber + " 行的銷售額格式不正確: " + tokens[6] + "，已設為0");
                        movie.setSales(0L);
                    }
                    
                    LocalDateTime now = LocalDateTime.now();
                    movie.setCreateTime(now);
                    movie.setUpdateTime(now);
                    String user = principal != null ? principal.getName() : "csv";
                    movie.setCreateName(user);
                    movie.setUpdateName(user);

                    dao.save(movie);
                } catch (Exception e) {
                    // 記錄單行處理錯誤但繼續處理其他行
                    System.out.println("處理第 " + lineNumber + " 行時發生錯誤: " + e.getMessage());
                }
            }
        } catch (Exception e) {
            model.addAttribute("message", "上傳失敗：" + e.getMessage());
            e.printStackTrace(); // 在控制台輸出詳細錯誤信息
            return "movies/upload";
        }

        model.addAttribute("message", "上傳成功！");
        return "redirect:/movies";
    }
}

